<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="description" content="">
    <meta name="keywords" content="">
    <title>Forth Reference</title>
    <link rel="stylesheet" href="doc.css">
    <!--[if IE]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>
<body>
<h1>Forth Reference</h1>
<hr>
<h2>Definitions in instruction memory</h2>
<hr>
\
=2.0000: check_alignment
 Compilation option: `1` to check address alignment and trigger an error
 upon bad alignment, `0` for higher speed. Normally `0`.
=2.0011: hostfunc ( ? -- ? )
 When running in simulation, some host functions are available.
 The compiler invokes them by compiling a function number and a call to
 `hostfunc`. Use `write-protect` to flag an error when host functions
 are invoked at run time to ensure they aren't called in the target system.
=2.0010: cold ( -- )
 Boot vector forward reference.
=2.0020: exception ( n -- )
 Exception processing forward reference.
=2.0100: noop ( -- )
 A subroutine that does nothing. This is very useful in Forth.
 For "lazy interrupts", it can be inserted where needed to improve
 interrupt latency.
=2.0110: io@ ( addr -- n )
 Fetch from an input device.
=2.0120: io! ( n addr -- )
 Store to an output device.
=2.0130: = ( n1 n2 -- flag )
 flag is true if and only if x1 is bit-for-bit the same as x2.
=2.0140: < ( n1 n2 -- flag )
 flag is true if and only if n1 is less than n2.
=2.0150: > ( n1 n2 -- flag )
 flag is true if and only if n1 is greater than n2.
=2.0160: cell+ ( a-addr1 -- a-addr2 )
 Add the size in address units of a cell to a-addr1, giving a-addr2.
=2.0170: cells ( n -- n*2 )
 n2 is the size in address units of n1 cells.
=2.0210: @ ( addr -- x )
 `x` is the value stored at a-addr.
=2.0200: ! ( x addr -- )
 Store `x` at a-addr.
=2.0180: c! ( c addr -- )
 Store `c` at addr.
=2.0200: c@ ( addr -- c )
 `c` is the byte stored at addr.
=2.0190: w! ( w addr -- )
 Store `w` at addr. Only applies to 32-bit machines.
=2.0220: w@ ( addr -- w )
 `w` is the 16-bit value stored at addr. Only applies to 32-bit machines.
=2.0300: or ( n m -- n|m )
 x3 is the bit-by-bit logical-or of x1 with x2.
 In `chad`, `or` is made of `invert` and `and` instructions.
 Most code can get by with `+` instead, if speed matters.
=2.0310: rot ( x1 x2 x3 -- x2 x3 x1 )
 Rotate the top three stack entries.
=2.0320: execute ( xt -- )
 Remove `xt` from the stack and perform the semantics identified by it.
 Other stack effects are due to the word `execute`d
=2.0325 ?dup ( x -- 0 | x x )
 Duplicate x if it is non-zero.
=2.0330: 2dup ( d -- d d )
 Duplicate cell pair x1 x2 (or `d`).
=2.0340: 2drop ( d -- )
 Drop cell pair x1 x2 (or `d`) from the stack.
=2.0350: char+ ( a -- a+1 )
 Add the size in address units of a character to c-addr1, giving c-addr2.
 Same as `1+`.
=2.0360: 1+ ( n -- n+1 )
 Add 1 to `n`;
=2.0370: 1- ( n -- n-1 )
 Subtract 1 from `n`.
=2.0380: negate ( n -- -n )
 Negate `n`.
=2.0390: tuck ( n1 n2 -- n2 n1 n2 )
 Copy the first (top) stack item below the second stack item.
=2.0400: +! ( n addr -- )
 Add `n` to the single-cell number at a-addr.
=2.0405: times ( n xt -- )
 Execute `xt` n times. If n <= 0, do nothing.
=2.0410: um* ( u1 u2 -- ud )
 Multiply u1 by u2, giving the unsigned double-cell product ud.
 All values and arithmetic are unsigned.
=2.0420: um/mod ( ud u -- ur uq )
 Divide `ud` by `u1`, giving the quotient `uq` and the remainder `ur`.
 All values and arithmetic are unsigned.
 An ambiguous condition exists if u1 is zero or if the quotient
 lies outside the range of a single-cell unsigned integer.
=2.0430: * ( n1 n2 -- n3 )
 Multiply `n1` by `n2` giving the product `n3`.
=2.0440: dnegate ( d -- -d )
 Negate `d`.
=2.0450: abs ( n -- u )
 `u` is the absolute value of `n`.
=2.0460: dabs ( d -- ud )
 ud is the absolute value of d.
=2.0470: /mod ( n1 n2 -- rem quot )
 Divide `n1` by `n2`, giving the single-cell remainder `rem` and the
 single-cell quotient `quot`. An ambiguous condition exists if `n2` is zero.
=2.0480: mod ( n1 n2 -- rem )
 Divide `n1` by `n2`, giving the single-cell remainder `rem`.
 An ambiguous condition exists if `n2` is zero.
=2.0490: / ( n1 n2 -- quot )
 Divide `n1` by `n2`, giving the single-cell quotient `quot`.
 An ambiguous condition exists if `n2` is zero.
=2.0500: m* ( n1 n2 -- d )
 `d` is the signed product of `n1` times `n2`.
=2.0510: */mod ( n1 n2 n3 -- rem quot )
 Multiply `n1` by `n2` producing the intermediate double-cell result d.
 Divide d by `n3` producing the single-cell remainder `rem` and the
 single-cell quotient `quot`.
 An ambiguous condition exists if `n3` is zero, or if `quot` lies outside
 the range of a single-cell signed integer.
=2.0520: */ ( n1 n2 n3 -- n4 )
 Multiply `n1` by `n2` producing the intermediate double-cell result d.
 Divide d by `n3` giving the single-cell quotient `n4`.
 An ambiguous condition exists if `n3` is zero or if `n4` lies
 outside the range of a signed number.
=2.0530: base ( -- a-addr )
 `a-addr` is the address of a cell containing the current
 number-conversion radix {2 ... 36}.
=2.0540: state ( -- a-addr )
 `a-addr` is the address of a cell containing the compilation-state flag.
 `state` is true when in compilation state, false otherwise.

 Note: A program shall not directly alter the contents of `state`.
=2.0541: >in ( -- a-addr )
 An index into the `tib` input buffer.
=2.0542: tibs ( -- a-addr )
 The number of characters in the input buffer.
=2.0550: allot ( n -- )
 If `n` is greater than zero, reserve n address units of data space.
 If `n` is less than zero, release `n` address units of data space.
 If `n` is zero, leave the data-space pointer unchanged.
=2.0560: here ( -- addr )
 `addr` is the data-space pointer. `: here dp @ ;`
=2.0570: , ( x -- )
 Reserve one aligned cell of data space and store `x` in the cell.
=2.0580: c, ( c -- )
 Reserve one byte of data space and store `c` in the byte.
=2.0700: u< ( u1 u2 -- flag )
 flag is true if and only if u1 is less than u2.
=2.0710: min ( n1 n2 -- n3 )
 n3 is the lesser of n1 and n2.
=2.0720: max ( n1 n2 -- n3 )
 n3 is the greater of n1 and n2.
=2.0730: depth ( -- +n )
 `+n` is the number of single-cell values contained in the
 data stack before `+n` was placed on the stack.
=2.0740: exec2: ( n -- )
 Jump forward by `2*n` instructions in code.
=2.0750: exec1: ( n -- )
 Jump forward by `n` instructions in code.
=2.0760: cop_options ( -- n )
 Get option flags from the coprocessor, 0 = none.
#
H<ul>
-bit 0: Hardware multiplier (um*) is included.
-bit 1: Hardware divider (um/mod) is included.
-bit 2: Hardware shifter (drshift, dlshift) is included.
-bit 8: Overflow flag from last divide operation. Next good divide clears it.
H</ul>
=2.1000: false ( -- false )
 Return a `false` flag.
=2.1010: true ( -- true )
 Return a `true` flag.
=2.1020: within ( x xlo xhi -- flag )
 Perform a comparison of a test value `u` with a lower limit `xlo`
 and an upper limit `xhi`, returning true if:
#
H<ul>
-(`xlo` < `xhi`) and (`xlo` <= `x` and `x` < `uhi`), or
-(`xlo` > `xhi`) and (`xlo` <= `x` or `x` < `xhi`)
H</ul>
 `x`, `xlo`, and `xhi` may be either signed or unsigned, but not mixed.
=2.1030: /string ( addr1 u1 n -- addr2 u2 )
 Adjust the character string at `addr1` by `n` characters.
 The resulting character string, specified by `addr2 u2`,
 begins at `addr1` plus `n` characters and is `u1 - n` characters long.
=2.0135: <> ( n1 n2 -- flag )
 flag is true if and only if `x1` is not bit-for-bit the same as `x2`.
=2.1040: 0<> ( x y -- f )
 flag is true if and only if `x` is not equal to zero.
=2.1050: 0> ( n -- f )
 flag is true if and only if `n` is greater than zero.
=2.1060: u> ( u1 u2 -- flag )
 flag is true if and only if `u1` is greater than `u2`.
=2.1070: 2>r ( d -- | -- d )
 Transfer cell pair x1 x2 to the return stack.
 Semantically equivalent to `swap >r >r`.
=2.1080: 2r> ( -- d | d -- )
 Transfer cell pair x1 x2 from the return stack.
 Semantically equivalent to `r> r> swap`.
=2.1090: 2r@ ( -- d | d -- d )
 Copy cell pair x1 x2 from the return stack.
 Semantically equivalent to `r> r> 2dup >r >r swap`.
=2.1100: third ( x1 x2 x3 -- x1 x2 x3 x1 )
 Equivalent to `2 pick`.
=2.1120: rshift ( x1 u -- x2 )
 Perform a logical right shift of u bit-places on x1, giving x2.
 Put zeroes into the most significant bits vacated by the shift.
 An ambiguous condition exists if u is greater than or equal to
 the number of bits in a cell.
=2.1110: lshift ( x1 u -- x2 )
 Perform a logical left shift of u bit-places on x1, giving x2.
 Put zeroes into the least significant bits vacated by the shift.
 An ambiguous condition exists if u is greater than or equal to
 the number of bits in a cell.

=2.1130: d+    ( d1 d2 -- d3 )
 Add d2 to d1, giving the sum d3.
=2.1140: d-    ( d1 d2 -- d3 )
 Subtract d2 from d1, giving the difference d3.
=2.1150: d2*   ( d1 -- d2 )
 d2 is the result of shifting d1 one bit toward the most-significant bit,
 filling the vacated least-significant bit with zero.
=2.1160: d2/   ( d1 -- d2 )
 d2 is the result of shifting d1 one bit toward the least-significant bit,
 leaving the most significant bit unchanged.
=2.1170: d=    ( d1 d2 -- flag )
 flag is true if and only if d1 is bit-for-bit the same as d2.
=2.1180: du<   ( ud1 ud2 -- flag )
 flag is true if and only if ud1 is less than ud2.
=2.1190: 2swap ( abcd -- cdab )
 Exchange the top two cell pairs.
=2.1200: count ( a -- a+1 u )
 Return the character string specification for the counted string stored at `a`.
 `a+1` is the address of the first character after `a`.
 `u` is the contents of the character at `a`,
 which is the length in characters of the string at `a+1`.
=2.1210: @+ ( a -- a+cell u )
 Return the character string specification for the counted string stored at `a`.
 `a+cell` is the address of the first character after `a`.
 `u` is the contents of the cell at `a`,
 which is the length in characters of the string at `a+1`.
=2.1220: 2@ ( a-addr -- x1 x2 )
 Fetch the cell pair x1 x2 stored at a-addr. x2 is stored at a-addr and x1 at
 the next consecutive cell. It is equivalent to the sequence `dup cell+ @ swap @`.
=2.1230: 2! ( x1 x2 a-addr -- )
 Store the cell pair x1 x2 at a-addr, with x2 at a-addr and x1 at the next
 consecutive cell. It is equivalent to the sequence `swap over ! cell+ !`.
=2.1240: 2+! ( n a-addr -- )
 Add a cell `n` to a double-cell variable and carry into the upper part.
=2.2000: 'TXbuf ( -- ioa )
 8-bit UART output buffer.
=2.2010: 'TXbusy ( -- ioa )
 UART busy flag.
=2.2100: ScreenProfile ( -- addr )
 Points to a table of `xt`s of terminal actions.
 The actions in a table are:
#
H<ul>
- `emit`
- `cr`
- `page`
H</ul>
=2.2110: emit ( c -- )
 Send a character to the terminal.
 The terminal is responsible for handling UTF-8 sequences.
=2.2111: cr ( -- )
 Cause subsequent output to appear at the beginning of the next line.
=2.2112: page ( -- )
 Clear the screen and reset the cursor position to the upper left corner.
=2.3000: hld ( -- c-addr )
 A pointer variable for numeric conversion.
=2.3010: bl ( -- ' ' )
 `char` is the character value for a space.
=2.3110: count ( a u -- a+1 u-1 )
 Convert a counted string to an address and a length.
 A counted string consists of a 1-byte length value (0 to 255)
 along with that many byte-wide characters in data space.
=2.3140: type ( c-addr u -- )
 If `u` is greater than zero, display the character string specified by
 c-addr and u. The output device should handle UTF-8 as a standard.
=2.3150: s>d ( n -- d )
 Convert the number n to the double-cell number d with the
 same numerical value.
=2.3160: space ( -- )
 Display one space.
=2.3170: spaces ( n -- )
 If `n` is greater than zero, display `n` spaces.
=2.3180: digit ( n -- char )
 Convert `n` to an ASCII digit spanning '0' to '9' and 'A' to 'Z'.
=2.3190: <# ( ud -- ud' )
 Initialize the pictured numeric output conversion process.
 In `chad`, numeric conversion is done at the top of data space:
 `: <#  dm-size hld ! ;`.
=2.3200: hold ( c -- )
 Add `char` to the beginning of the pictured numeric output string.
 An ambiguous condition exists if `hold` executes outside of a
 `<# #>` delimited number conversion.
=2.3210: # ( ud1 -- ud2 )
 Divide `ud1` by the number in BASE giving the quotient `ud2` and the
 remainder `n` where `n` is the least significant digit of `ud1`.
 Convert `n` to external form and add the resulting character
 to the beginning of the pictured numeric output string.
 An ambiguous condition exists if `#` executes outside of
 a `<# #>` delimited number conversion.
=2.3220: #s ( ud -- 00 )
 Convert one digit of `ud1` according to the rule for `#`.
 Continue conversion until the quotient, `ud2`, is zero.
 An ambiguous condition exists if `#s` executes outside of
 a `<# #>` delimited number conversion.
=2.3230: sign ( n -- )
 If `n` is negative, add a minus sign to the beginning of the
 pictured numeric output string.
 An ambiguous condition exists if `sign` executes outside of
 a `<# #>` delimited number conversion.
=2.3240: #> ( ud -- c-addr u )
 Drop `ud`.
 Make the pictured numeric output string available as a character string.
 `c-addr` and `u` specify the resulting character string.
 A program may replace characters within the string.
=2.3250: d.r ( d width -- )
 Display `d` right aligned in a field `width` characters wide.
 If the number of characters required to display `d` is greater than
 `width`, all digits are displayed with no leading spaces in a field
 as wide as necessary.
=2.3260: u.r ( u width -- )
 Display `u` right aligned in a field `width` characters wide.
 If the number of characters required to display `width` is greater than
 `width`, all digits are displayed with no leading spaces in a field as
 wide as necessary.
=2.3270: .r ( n width -- )
 Display `n` right aligned in a field `width` characters wide.
 If the number of characters required to display n1 is greater than
 `width`, all digits are displayed with no leading spaces in a field
 as wide as necessary.
=2.3280: d. ( d -- )
 Display d in free field format.
=2.3290: u. ( u -- )
 Display u in free field format.
=2.3300: . ( n|u -- )
 Display n in free field format.
=2.3310: ? ( a -- )
 Display the value stored at a-addr.
=2.3320: h.x ( u n -- )
 Display `u` in hex format using `n-1` digits.
=2.2900: fpclear ( -- )
 Clear the frame stack
=2.2910: >mem ( n a -- a' )
 Store `n` leaving `a` indexed to the next cell.
=2.2920: mem> ( a -- a' n )
 Pre-decrement `a` by 1 cell and fetch `a`.
=2.2930: ds>mem ( ... n addr1 -- addr2 )
 Move data stack to memory
=2.2940: mem>ds ( addr1 -- ... addr2 )
 Move memory to data stack
=2.2950: stack[ ( n -- )
 Move the data stack to the frame stack, leaving `n` cells on top.
 The return stack is emptied except for one cell to keep the sim running.
=2.2960: ]stack ( ? -- ? )
 Restore the stacks saved by `f[`.
=2.2970: pick ( xu...x0 u -- xu...x0 xu )
 Remove `u`. Copy the `xu` to the top of the stack.
 An ambiguous condition exists if there are less than u+2
 items on the stack before `pick` is executed.
=2.2980: roll
 Remove `u`. Rotate `u+1` items on the top of the stack.
 An ambiguous condition exists if there are less than u+2 items
 on the stack before `roll` is executed.
=2.2990: /locals ( xn ... x0 n m -- )
 Moves `n` cells onto the frame stack and reserve `m` cells of extra space
 whose address is `[local]`.
=2.2991: locals/ ( -- )
 Drop the top frame from the frame stack.
=2.4000: @f( ( df-addr -- )
 Start reading SPI flash using a `0B` "fast read" command at the double address
 `df-addr`. The constant `BASEBLOCK` is added to address[23:16] to allow the
 SPI flash to contain an FPGA bitstream at location 0.
=2.4010: _c@f ( -- c )
 Read the next byte from SPI flash.
=2.4020: _@f ( -- c )
 Read the next cell from SPI flash using enough byte reads for a complete cell.
 The byte-order is big-endian.
=2.4030: )@f ( -- )
 End the SPI bus sequence (raise CS#)
=2.4040: c@f ( df-addr -- c )
 Read a byte from SPI flash at the double address `df-addr`.
 The data is expected to be synchronized with the keystream, if used.
=2.4050: @f ( df-addr -- n )
 Read a cell from SPI flash at the double address `df-addr`.
 The data is expected to be synchronized with the keystream, if used.
=2.4060: fcount ( df-addr -- df-addr+1 c )
 SPI flash version of `count`. Read the byte and bump the double address.
=2.4065: fbuf ( df-addr c-addr u -- )
 Read `u` bytes from 2-cell flash address `df-addr` onto RAM.
=2.4070: ftype ( df-addr u -- )
 SPI flash version of `type`. Type the string at the double address.
=2.4080: f$type ( f-addr -- )
 Run-time action of `."`, types the counted string in flash with the upper half
 of the address zeroed. Text space must be addressable by one cell.
=2.4100: _hfind ( addr len wid -- addr len 0 | addr len ht )
 Search a wordlist given its `wid` and a string.
 If it's not found, return 0.
 If it is found, leave the SPI flash open and return `ht`.
=2.4110: hfind ( addr len -- addr len | 0 ht )
 Search the search order for a string.
 If it's not found, return the string.
 If it is found, leave the SPI flash open and return `ht`.
=2.4120: msg ( idx f-addr -- )
 Type counted string `idx` of a list of counted strings that's terminated by
 a zero length string. If `idx` points past the end of the list, use the
 first string (message[0]).
=2.5000: lit, ( u -- )
 Compile a literal `u`.
=2.5010: compile, ( xt -- )
 Compile a call to `xt`.
=2.5020: exit, ( -- )
 Convert the previous call to a jump,
 add a RET bit to the previous literal, or compile an exit.
=2.6000: toupper ( c -- C )
 Convert `c` to uppercase.
=2.6010: digit? ( c base -- n flag )
 Convert ASCII alphanumeric character `c` to numeric digit `n`.
 If `c` is valid and `n` is within the specified base, return true.
 Otherwise, return false.
=2.6020: >number ( ud1 c-addr1 u1 -- ud2 c-addr2 u2 )
 `ud2` is the unsigned result of converting the characters within the string
 specified by `c-addr1 u1` into digits, using the number in `base`,
 and adding each into `ud1` after multiplying `ud1` by the number in `base`.
 Conversion continues left-to-right until a character that is not convertible,
 including any `+` or `-`, is encountered or the string is entirely converted.
 `c-addr2` is the location of the first unconverted character or the first character
 past the end of the string if the string was entirely converted.
 `u2` is the number of unconverted characters in the string.
 An ambiguous condition exists if `ud2` overflows during the conversion.
=2.6030: source ( -- c-addr len )
 `c-addr` is the address of, and `len` is the number of characters in, the input buffer.
=2.6040: /source ( -- c-addr len )
 `source` indexed by `>in`: Input line remaining after `>in`.
=2.6050: skipbl  ( -- )
 Skip blanks (leading spaces) in the input stream.
=2.6060: parse-name ( <name> -- addr len )
 Skip leading space delimiters. Parse name delimited by a space.
 `addr` is the address of the selected string within the input buffer and `len` is
 its length in bytes. If the parse area is empty or contains only white space,
 the resulting string has length zero.
=2.6070: parse ( delimiter -- addr len )
 If `delimiter` is a blank, skip leading spaces.
 Parse name delimited by `delimiter`.
 If `delimiter` is non-blank, advance `>in` one position so it's just past the delimiter.
=2.6080: \ ( ccc<EOL> -- )
 Skip text input until end-of-line.
=2.6100: key? ( -- n )
 Return the numbers of characters in the UART input buffer.
=2.6110: key ( -- c )
 Read a character from the UART input buffer.
 If the buffer is empty, wait for a character.
=2.6130: echoing ( -- a-addr )
 A variable used by `accept`. Set to `true` if the terminal is in `raw mode`.
 The usual case is `cooked mode`, where the terminal allows local line editing and sends
 the entire line at once when you hit <enter>.
=2.6140: accept ( c-addr +n1 -- +n2 )
 Receive a string of at most `+n1` characters.
 Display graphic characters as they are received.
 Input terminates when either CR or LF is received.
 When input terminates, nothing is appended to the string.
 `+n2` is the length of the string stored at `c-addr`.
=2.6150: refill ( -- okay? )
 Attempt to fill the input buffer from the input source, returning a true flag if successful.
 When the input source is the user input device, attempt to receive input into the
 terminal input buffer.
 If successful, make the result the input buffer, set `>in` to zero, and return true.
 Receipt of a line containing no characters is considered successful.
 If there is no input available from the current input source, return false.
 When the input source is a string from `evaluate`, return false and perform no other action.
=2.6160: context ( -- f-addr )
 The head of the wordlist at the top of the search order. `f-addr` is in SPI flash.
=2.6170: get-order ( -- widn ... wid1 n )
 Returns the number of word lists `n` in the search order and the word list identifiers
 `widn ... wid1` identifying these word lists.
 `wid1` identifies the word list that is searched first,
 and `widn` the word list that is searched last. The search order is unaffected.
=2.6180: set-order ( widn .. wid1 n -- )
 Set the search order to the word lists identified by `widn ... wid1`.
 Subsequently, word list `wid1` will be searched first, and word list `widn` searched last.
 If `n` is zero, empty the search order.
 If `n` is `-1`, set the search order to `root forth-wordlist`.
 A system shall allow `n` to be at least eight.
=2.6200: set-current ( wid -- )
 Set the compilation word list to the word list identified by `wid`.
=2.6210: get-current ( -- wid )
 Return `wid`, the identifier of the compilation word list.
=2.6220: only        ( -- )
 Set the search order to the minimum search order.
 The minimum search order shall include the words `forth-wordlist` and `set-order`.
=2.6230: also        ( -- )
 Transform the search order consisting of `widn, ... wid2, wid1`
 (where wid1 is searched first) into `widn, ... wid2, wid1, wid1`.
 An error occurs if there are more than eight word lists in the search order.
=2.6240: previous    ( -- )
 Transform the search order consisting of `widn, ... wid2, wid1`
 (where wid1 is searched first) into `widn, ... wid2`.
 An ambiguous condition exists if the search order was empty before `previous` was executed.
=2.6250: definitions ( -- )
 Make the compilation word list the same as the first word list in the search order.
 Specifies that the names of subsequent definitions will be placed in the compilation word list.
 Subsequent changes in the search order will not affect the compilation word list.
=2.6260: forth       ( -- )
 Transform the search order consisting of 'widn, . . . wid2, wid1'
 (where wid1 is searched first) into 'widn, . . . wid2, `forth-wordlist`.
=2.6270: order       ( -- )
 Display the word lists in the search order in their search order sequence,
 from last searched to first searched, just like `.s`.
 Also display the word list into which new definitions will be placed.
 `order` may be implemented using pictured numeric output words.
 Consequently, its use may corrupt the transient region identified by `#>`.
=2.6280: words ( -- )
 List the definition names in the first word list of the search order.
=2.6290: .s ( ? -- ? )
 Copy and display the values currently on the data stack.
=2.6300: [ ( -- )
 Enter interpretation state. `[` is an immediate word.
=2.6310: ] ( -- )
 Enter compilation state.
=2.6320: quit ( error_id -- )
 `quit` is a replacement for ANS Forth's `THROW`.
 Due to hardware stack limitations, `CATCH` is not implemented.
 Any call or jump to `quit` restarts the interpreter with stacks cleared.
 If `error_id` is non-zero, an error message is printed and the data and return
 stacks are printed ans cleared.
=
